AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation stack for RepoRadar

Parameters:
  Environment:
    Type: String
  GitHubAccessToken:
    Type: String
  GraphQLApiKeyExpirationDate:
    Type: String

Globals:
  Function:
    Timeout: 3

Resources:
  RepoRadar:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: src/app.handler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RepoTable
      Environment:
        Variables:
          REPO_TABLE_NAME: !Ref RepoTable
          GITHUB_ACCESS_TOKEN: !Ref GitHubAccessToken
      Events:
        Cron:
          Type: Schedule
          Properties:
            Schedule: cron(0 12 * * ? *)
            Enabled: True
            Input: '{ "query": "created:>2019-03-22 stars:>500 language:TypeScript sort:updated" }'

  RepoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      SSESpecification:
        SSEEnabled: true

  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub reporadar-appsync-dynamodb-role-${Environment}
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join ["", [!GetAtt RepoTable.Arn, "*"]]

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub RepoRadar GraphQL API (${Environment})
      AuthenticationType: API_KEY

  GraphQLApiApiKey3:
    Type: AWS::AppSync::ApiKey
    Properties:
      Description: !Sub RepoRadar GraphQL API Key (${GraphQLApiKeyExpirationDate})
      ApiId: !GetAtt GraphQLApi.ApiId
      Expires: !Ref GraphQLApiKeyExpirationDate

  RepoTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: RepoTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName: !Ref RepoTable

  QueryAllReposResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: allRepos
      DataSourceName: !GetAtt RepoTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Scan",
            #if( $ctx.args.limit )
                "limit": $ctx.args.limit,
            #end
            #if( ${ctx.args.nextToken} )
                "nextToken": "${ctx.args.nextToken}"
            #end
        }
      ResponseMappingTemplate: |
        {
            "repos": $utils.toJson($ctx.result.items),
            #if( ${ctx.result.nextToken} )
                "nextToken": "${ctx.result.nextToken}",
            #end
        }

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type Repo {
          id: String!
          description: String!
          url: String!
        }

        type AllReposResponse {
          repos: [Repo!]!
          nextToken: String
        }

        type Query {
          allRepos(limit: Int, nextToken: String): AllReposResponse!
        }

        schema {
          query: Query
        }

  ApiDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub RepoRadar API Distributon (${Environment})
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:
              !Select [
                0,
                !Split [
                  "/",
                  !Select [
                    1,
                    !Split ["https://", !GetAtt GraphQLApi.GraphQLUrl],
                  ],
                ],
              ]
            Id:
              !Select [
                0,
                !Split [
                  "/",
                  !Select [
                    1,
                    !Split ["https://", !GetAtt GraphQLApi.GraphQLUrl],
                  ],
                ],
              ]
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !GetAtt GraphQLApiApiKey3.ApiKey
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginReadTimeout: 30
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1, TLSv1.1, TLSv1.2]
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
          ForwardedValues:
            QueryString: false
          SmoothStreaming: false
          Compress: true
          TargetOriginId:
            !Select [
              0,
              !Split [
                "/",
                !Select [1, !Split ["https://", !GetAtt GraphQLApi.GraphQLUrl]],
              ],
            ]
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub reporadar-${Environment}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
    DeletionPolicy: Retain

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Join ["", ["arn:aws:s3:::", !Ref FrontendBucket, /*]]

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - FrontendBucket
    Properties:
      DistributionConfig:
        Comment: !Sub RepoRadar Frontend Distributon (${Environment})
        Origins:
          - DomainName:
              !Select [2, !Split ["/", !GetAtt FrontendBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: "80"
              HTTPSPort: "443"
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100

Outputs:
  RepoTableName:
    Description: Name of the DynamoDB database
    Value: !Ref RepoTable

  GraphQLApiUrl:
    Description: Endpoint of the public GraphQL API
    Value: !Sub https://${ApiDistribution.DomainName}/graphql

  FrontendDistributionId:
    Description: CloudFront ID for frontend CDN
    Value: !Ref FrontendDistribution

  FrontendBucket:
    Description: Name of the s3 frontend bucket
    Value: !Ref FrontendBucket

  FrontendUrl:
    Description: Url for the frontend
    Value: !Sub https://${FrontendDistribution.DomainName}
